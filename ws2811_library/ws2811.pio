;
;        timings
; 800kHz        400kHz
;
; T0H 250ns     500ns
; T0L 1000ns    2000ns
; T1H 875ns     1750ns
; T1L 375ns     750ns
;


; We can have multiple programs in one .pio file (and you will see this if you click the GitHub link above the main program
; listing), and each of these will have its own .program directive with a different name. The assembler will go through each
; program in turn, and all the assembled programs will appear in the output file.
; Each PIO instruction is 16 bits in size. Generally, 5 of those bits in each instruction are used for the “delay” which is
; usually 0 to 31 cycles (after the instruction completes and before moving to the next instruction).
.program ws2811


; This directive .side_set 1 says we’re stealing one of those delay bits to use for "side-set". The state machine will use this
; bit to drive the values of some pins, once per instruction, in addition to what the instructions are themselves doing. This
; is very useful for high frequency use cases (e.g. pixel clocks for DPI panels), but also for shrinking program size, to fit
; into the shared instruction memory.
; Note that stealing one bit has left our delay range from 0-15 (4 bits), but that is quite natural because you rarely want to
; mix side-set with lower frequency stuff. Because we didn’t say .side_set 1 opt, which would mean the side-set is optional 
; (at the cost of another bit to say whether the instruction does a side-set), we have to specify a side-set value for
; every instruction in the program. This is the side N you will see on each instruction in the listing.
.side_set 1


; define lets you declare constants. The public keyword means that the assembler will also write out the value of the
; define in the output file for use by other software: in the context of the SDK, this is a #define. We are going to use T1, T2
; and T3 in calculating the delay cycles on each instruction.

.define public T1 2
.define public T2 5
.define public T3 3

; not sure if useful
.lang_opt python sideset_init = pico.PIO.OUT_HIGH
.lang_opt python out_init     = pico.PIO.OUT_HIGH
.lang_opt python out_shiftdir = 1


; Concerning first line :
.wrap_target
bitloop:
    out x, 1       side 0 [T3 - 1] ; Side-set still takes place when instruction stalls (-1 because need to remove instruction itself)

; - out instruction. out takes some bits from the output shift register (OSR), and writes them somewhere
;   else. In this case, the OSR will contain pixel data destined for our LEDs.
; - [T3 - 1] is the number of delay cycles (T3 minus 1). T3 is a constant we defined earlier.
; - x (one of two scratch registers; the other imaginatively called y) is the destination of the write data. State machines
;   use their scratch registers to hold and compare temporary data.
; - side 0: Drive low (0) the pin configured for side-set.

; So, the state machine will do the following operations when it executes this instruction:
; 1. Set 0 on the side-set pin (this happens even if the instruction stalls because no data is available in the OSR)
; 2. Shift one bit out of the OSR into the x register. The value of the x register will be either 0 or 1.
; 3. Wait T3 - 1 cycles after the instruction (I.e. the whole thing takes T3 cycles since the instruction itself took a cycle).
; Note that when we say cycle, we mean state machine execution cycles: a state machine can be made to execute at
; a slower rate than the system clock, by configuring its clock divider



; Next Line :
    jmp !x do_zero side 1 [T1 - 1] ;

; 1. side 1 on the side-set pin (this is the leading edge of our pulse)
; 2. If x == 0 then go to the instruction labelled do_zero, otherwise continue on sequentially to the next instruction
; 3. We delay T1 - 1 after the instruction (whether the branch is taken or not)

; at this moment here is what we got on the pin :
;      <---T3---><-T1->
;                ______
; GPIO _________/


; Next Line :
do_one:
    jmp  bitloop   side 1 [T2 - 1] ; Continue driving high, for a long pulse

; The pin has been low for time T3, and high for time T1. If the x register is 1 (remember this contains our 1 bit of pixel
; data) then we will fall through to the instruction labelled do_one, otherwise do_zero.

; On this side of the branch we do the following:
; 1. side 1 on the side-set pin (continue the pulse)
; 2. jmp unconditionally back to bitloop (the label we defined earlier, at the top of the program); 
; the state machine is done with this data bit, and will get another from its OSR
; 3. Delay for T2 - 1 cycles after the instruction

; We should now have this if it was 1 :
;      <---T3---><-T1-><------T2----->
;                _____________________
; GPIO _________/                     \__


; Next Line :
do_zero:
    nop            side 0 [T2 - 1] ; Or drive low, for a short pulse


; 1. side 0 on the side-set pin (the trailing edge of our pulse)
; 2. nop means no operation. We don’t have anything else we particularly want to do, so waste a cycle
; 3. The instruction takes T2 cycles in total

; We should now have this if it was 0 :
;      <---T3---><-T1-><-------T2------>
;                ______
; GPIO _________/      \_______________



; Next Line :
.wrap

; This matches with the .wrap_target directive at the top of the program. Wrapping is a hardware feature of the state
; machine which behaves like a wormhole: you go in through the .wrap statement and appear at the .wrap_target zero
; cycles later, unless the .wrap is preceded immediately by a jmp whose condition is true. This is important for getting
; precise timing with programs that must run quickly, and often also saves you a slot in the instruction memory.


; T3, T2 and cie are not in correct order, but in the end this is what we achieved :
;          <--T1--><------T2------><----T3---->
;          ________
; 0 level /        \___________________________
;          ________________________
; 1 level /                        \___________
;           250ns        625ns         375ns


;---------------------------------- State Machine Configuration ------------------------------------------------------------;

; When we run pioasm on the .pio file we have been looking at, and ask it to spit out SDK code (which is the default), it will
; create some static variables describing the program, and a method ws2812_default_program_config which configures a
; PIO state machine based on user parameters, and the directives in the actual PIO program (namely the .side_set and
; .wrap in this case).
; Of course how you configure the PIO SM when using the program is very much related to the program you have written.
; Rather than try to store a data representation off all that information, and parse it at runtime, for the use cases where
; you’d like to encapsulate setup or other API functions with your PIO program, you can embed code within the .pio file

; pio
; Which of RP2040’s two PIO instances we are dealing with
; sm
; Which state machine on that PIO we want to configure to run the WS2812 program
; offset
; Where the PIO program was loaded in PIO’s 5-bit program address space
; pin
; which GPIO pin our WS2812 LED chain is connected to
; freq
; The frequency (or rather baud rate) we want to output data at.
; rgbw
; True if we are using 4-colour LEDs (red, green, blue, white) rather than the usual 3.

% c-sdk {
#include "hardware/clocks.h"

static inline void ws2811_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {

    pio_gpio_init(pio, pin);

    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

    pio_sm_config c = ws2811_program_get_default_config(offset);

    sm_config_set_sideset_pins(&c, pin);

    sm_config_set_out_shift(&c, false, true, 24);

    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

    int cycles_per_bit = ws2811_T1 + ws2811_T2 + ws2811_T3;

    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);

    pio_sm_init(pio, sm, offset, &c);

    pio_sm_set_enabled(pio, sm, true);
}
%}


; Explanation :
;     //  Configure a GPIO for use by PIO. (Set the GPIO function select.)
;     pio_gpio_init(pio, pin);

;     // Sets the PIO pin direction of 1 pin starting at pin number pin to out
;     pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

;     // Get the default configuration using the generated function
;     // for this program (this includes things like the .wrap and .side_set configurations from the program). 
;     // We’ll modify this configuration before loading it into the state machine.
;     pio_sm_config c = ws2811_program_get_default_config(offset);

;     // Sets the side-set to write to pins starting at pin pin (we say starting at because if
;     // you had .side_set 3, then it would be outputting values on numbers pin, pin+1, pin+2)
;     sm_config_set_sideset_pins(&c, pin);

;     // False for shift_to_right (i.e. we want to shift out MSB first).
;     // True for autopull. 32 or 24 for the number of bits for the autopull threshold, i.e. the point at which the state
;     // machine triggers a refill of the OSR, depending on whether the LEDs are RGB or RGBW.
;     sm_config_set_out_shift(&c, false, true, 24);

;     sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);

;     // This is the total number of execution cycles to output a
;     // single bit. Here we see the benefit of .define public, we can use the T1 - T3 values in our code.
;     int cycles_per_bit = ws2811_T1 + ws2811_T2 + ws2811_T3;

;     // Slow the state machine’s
;     // execution down, based on the system clock speed and the number of execution cycles required per WS2811 data
;     // bit, so that we achieve the correct bit rate.
;     float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
;     sm_config_set_clkdiv(&c, div);

;     // Load our configuration into the state machine, and go to the start address (offset)
;     pio_sm_init(pio, sm, offset, &c);

;     // And make it go now!
;     pio_sm_set_enabled(pio, sm, true);

; At this point the program will be stuck on the first out waiting for data. This is because we have autopull enabled, the
; OSR is initially empty, and there is no data to be pulled. The state machine refuses to continue until the first piece of
; data arrives in the FIFO.